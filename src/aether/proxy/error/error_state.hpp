/*********************************************

  Copyright (c) Jackson Nestelroad 2020
  jackson.nestelroad.com

*********************************************/

#pragma once

#include <boost/system/error_code.hpp>
#include <iostream>
#include <string>
#include <string_view>
#include <utility>

#include "aether/proxy/error/exceptions.hpp"

namespace proxy::error {

// A data structure for representing an error state.
// Error codes can be Boost-given error codes or codes generated by proxy errors.
class error_state {
 public:
  error_state() noexcept;
  ~error_state() = default;
  error_state(const error_state& other) = default;
  error_state& operator=(const error_state& other) = default;
  error_state(error_state&& other) noexcept = default;
  error_state& operator=(error_state&& other) noexcept = default;

  inline bool has_boost_error() const noexcept { return boost_error_code_ != boost::system::errc::success; }

  inline bool has_proxy_error() const noexcept { return proxy_error_code_ != errc::success; }

  inline bool has_error() const noexcept { return has_boost_error() || has_proxy_error(); }

  inline explicit operator bool() const noexcept { return !has_error(); }

  inline boost::system::error_code boost_error() const noexcept { return boost_error_code_; }

  constexpr error_code proxy_error() const noexcept { return proxy_error_code_; }

  constexpr void set_boost_error(const boost::system::error_code& error) noexcept { boost_error_code_ = error; }

  constexpr void set_boost_error(const boost::system::errc::errc_t& error) noexcept {
    boost_error_code_ = boost::system::errc::make_error_code(error);
  }

  constexpr void set_proxy_error(const error_code& error) noexcept { proxy_error_code_ = error; }

  inline bool has_message() const noexcept { return !message_.empty(); }

  inline std::string_view message() const noexcept { return message_; }

  inline void set_message(std::string msg) noexcept { message_ = std::move(msg); }

  void clear() noexcept;
  void set_proxy_error(const base_exception& ex) noexcept;
  std::string_view get_message_or_proxy() const noexcept;
  std::string get_message_or_boost() const noexcept;

 private:
  boost::system::error_code boost_error_code_;
  error_code proxy_error_code_;
  std::string message_;
};

error_state boost_error(boost::system::error_code code, std::string message);

error_state proxy_error(error_code code, std::string message);

std::ostream& operator<<(std::ostream& out, const error_state& error);

}  // namespace proxy::error
