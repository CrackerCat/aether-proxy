/*********************************************

    Copyright (c) Jackson Nestelroad 2020
    jackson.nestelroad.com

*********************************************/

#pragma once

#include <boost/system/error_code.hpp>

#include <aether/proxy/error/exceptions.hpp>

namespace proxy::error {
    /*
        A data structure for representing an error state.
        Error codes can be Boost-given error codes or codes generated by proxy exceptions.
    */
    class error_state {
    private:
        boost::system::error_code boost_error_code;
        error_code proxy_error_code;
        std::string message;

    public:
        error_state() noexcept;

        inline bool has_boost_error() const noexcept {
            return boost_error_code != boost::system::errc::success;
        }

        inline bool has_proxy_error() const noexcept {
            return proxy_error_code != errc::success;
        }

        inline bool has_error() const noexcept {
            return has_boost_error() || has_proxy_error();
        }

        inline explicit operator bool() const noexcept {
            return !has_error();
        }

        constexpr boost::system::error_code get_boost_error() const noexcept {
            return boost_error_code;
        }

        constexpr error_code get_proxy_error() const noexcept {
            return proxy_error_code;
        }

        constexpr void set_boost_error(const boost::system::error_code &error) noexcept {
            boost_error_code = error;
        }

        constexpr void set_boost_error(const boost::system::errc::errc_t &error) noexcept {
            boost_error_code = boost::system::errc::make_error_code(error);
        }

        constexpr void set_proxy_error(const error_code &error) noexcept {
            proxy_error_code = error;
        }

        void clear() noexcept;
        void set_proxy_error(const base_exception &ex) noexcept;
        bool has_message() const noexcept;
        const std::string &get_message() const noexcept;
        void set_message(std::string_view msg) noexcept;
        std::string_view get_message_or_proxy() const noexcept;
        std::string_view get_message_or_boost() const noexcept;
    };

    std::ostream &operator<<(std::ostream &out, const error_state &error);
}